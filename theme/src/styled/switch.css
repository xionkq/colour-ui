.switch {
  --property-color-light: var(--default-bg-hover-color);
  --property-color-dark: var(--default-bg-hover-color);

  @apply h-6 w-10;
  @apply inline-grid shrink-0 grid-cols-[0fr_1fr_1fr] align-middle;
  @apply relative z-[1];
  @apply bg-transparent bg-origin-border;
  @apply rounded-full border border-solid border-transparent;
  @apply cursor-pointer select-none appearance-none place-content-center;
  @apply p-[3px];
  @apply transition-[grid-template-columns] duration-200;

  /*TODO: Use better methods to avoid flickering in the focus-visible*/
  outline-color: var(--property-color-dark);

  /* reference: https://github.com/saadeghi/daisyui/blob/master/packages/daisyui/src/components/toggle.css */
  > * {
    @apply h-full;
    @apply p-0.5;
    @apply z-1 col-span-1 col-start-2 row-start-1;
    @apply border-0;
    @apply bg-transparent;
    @apply cursor-pointer appearance-none;
    @apply property-transition;

    &:nth-child(2) {
      @apply opacity-100;
    }

    &:nth-child(3) {
      @apply opacity-0;
    }
  }

  &:has(:checked) {
    > :nth-child(2) {
      @apply opacity-0;
    }

    > :nth-child(3) {
      @apply opacity-100;
    }
  }

  /* gradient border */
  &::before {
    @apply content-[''];
    @apply bg-common-gradient bg-origin-border;
    @apply rounded-[inherit] border border-solid border-transparent;
    @apply absolute inset-[-1px] z-[-1];
    @apply mask-btn-border;
    @apply property-transition;
  }

  &:after {
    @apply content-[''];
    @apply aspect-square;
    @apply bg-common-gradient bg-origin-border;
    @apply rounded-full;
    @apply start-0 col-start-2 row-start-1;
    @apply property-transition;
  }

  &:focus-visible,
  &:has(:focus-visible) {
    @apply outline-solid outline-(--property-color-dark) outline-2 outline-offset-2;
    @apply transition-[grid-template-columns,outline-color];
  }

  &:checked,
  &[aria-checked='true'],
  &:has(> input:checked) {
    @apply grid-cols-[1fr_1fr_0fr];
  }

  /* the style in unchecked state */
  &:not(&:checked, &[aria-checked='true'], &:has(> input:checked)) {
    --property-color-light: var(--default-bg-color);
    --property-color-dark: var(--default-bg-color);
  }
}

.switch-info {
  &:checked,
  &[aria-checked='true'],
  &:has(> input:checked) {
    --property-color-light: var(--info-hover-color-light);
    --property-color-dark: var(--info-hover-color-dark);
  }
}

.switch-success {
  &:checked,
  &[aria-checked='true'],
  &:has(> input:checked) {
    --property-color-light: var(--success-hover-color-light);
    --property-color-dark: var(--success-hover-color-dark);
  }
}

.switch-warning {
  &:checked,
  &[aria-checked='true'],
  &:has(> input:checked) {
    --property-color-light: var(--warning-hover-color-light);
    --property-color-dark: var(--warning-hover-color-dark);
  }
}

.switch-error {
  &:checked,
  &[aria-checked='true'],
  &:has(> input:checked) {
    --property-color-light: var(--error-hover-color-light);
    --property-color-dark: var(--error-hover-color-dark);
  }
}

.switch-lg {
  @apply h-7 w-12;
}

.switch-md {
  @apply h-6 w-10;
}

.switch-sm {
  @apply h-5 w-8;
}

.switch-rect {
  @apply rounded;

  &:after {
    @apply rounded;
  }
}

.switch {
  &[disabled],
  &:disabled,
  &.switch-disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}
